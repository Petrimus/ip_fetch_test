# with fetch api:

const regex = /^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$/

myFetchFunction = () => {
  fetch("http://localhost:3000/ip_easy")
    .then((response) => response.json())
    .then(data => data.filter(ip => ip.match(regex)))
    .then((data) => {
      data.forEach((ip) => {
        addContent(ip);
      });
    });
};

-------------------------------

# or with xmlHttpRequest:

const regex = /^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$/

const sendHttpRequest = (url) => {
  return new Promise((resolve, reject) => {

    const xhr = new XMLHttpRequest()
    xhr.open('GET', url)
    xhr.onload = () => {
      const data = JSON.parse(xhr.response)
      // console.log('data ', data)
      resolve(data)
    }
    xhr.onerror = () => {
      alert('Connections failed')
      reject(new Error(message))
    }
    xhr.send()
  })
}

myFetchFunction = () => {  
  sendHttpRequest("http://localhost:3000/ip_hard")
    .then(data => data.filter(ip => ip.match(regex)))
    .then((data) => {
      data.forEach((ip) => {
        addContent(ip);
      });
    });
};

----------------------------------------

# and if you fect ip array of objects

const regex = /^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$/;

myFetchFunction = () => {
  fetch("http://localhost:3000/ip_object")
    .then((response) => response.json())
    .then((data) => data.map((person) => person.ip))
    .then((data) => data.filter((ip) => ip.match(regex)))
    .then((data) => {
      data.forEach((ip) => {
        addContent(ip);
      });
    });
};